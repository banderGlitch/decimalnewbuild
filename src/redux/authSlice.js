import { createSlice } from '@reduxjs/toolkit';

const autoGeneratedHeaders = [
    { key: 'Content-Type', value: 'application/json', autoGenerated: true, checked: true },
    { key: 'Connection', value: 'keep-alive', autoGenerated: true, checked: true },
  ];

const authSlice = createSlice({
    name: 'auth',
    initialState: {
        authHeader: null,
        authType: 'No Auth',
        token: '',
        username: '',
        password: '',
        jsonBody: '',
        queryParams: [], // Add this line for query parameters
        headers: [
            ...autoGeneratedHeaders,
            { key: '', value: '', autoGenerated: false, checked: false }, // Initialize with empty user row
          ],
    },
    reducers: {
        setAuthHeader: (state, action) => {
            state.authHeader = action.payload;
        },
        setAuthType: (state, action) => {
            state.authType = action.payload;
        },
        setToken: (state, action) => {
            state.token = action.payload;
        },
        setUsername: (state, action) => {
            state.username = action.payload;
        },
        setPassword: (state, action) => {
            state.password = action.payload;
        },
        setJsonBody: (state, action) => {
            state.jsonBody = action.payload;
        },
        setQueryParams: (state, action) => {
            state.queryParams = action.payload;
        },
        setHeaders: (state, action) => {
            state.headers = action.payload;
        },
        updateHeader: (state, action) => {
            const { index, key, value, checked } = action.payload;
            const header = state.headers[index];
            if (header) {
                header.key = key !== undefined ? key : header.key;
                header.value = value !== undefined ? value : header.value;
                header.checked = checked !== undefined ? checked : header.checked;
            }
        },
        addHeader: (state, action) => {
            state.headers.push(action.payload);
        },
        removeHeader: (state, action) => {
            state.headers = state.headers.filter((_, index) => index !== action.payload);
        },
    },
});

export const { setAuthHeader, setAuthType, setToken, setUsername, setPassword, setJsonBody, setQueryParams , setHeaders , updateHeader, addHeader , removeHeader } = authSlice.actions;
export default authSlice.reducer;


// import { createSlice } from '@reduxjs/toolkit';

// const authSlice = createSlice({
//   name: 'auth',
//   initialState: {
//     authHeader: null,
//   },
//   reducers: {
//     setAuthHeader: (state, action) => {
//       state.authHeader = action.payload;
//     },
//     setAuthType: (state, action) => {
//         state.authType = action.payload;
//       },
//   },
// });

// export const { setAuthHeader,  setAuthType } = authSlice.actions;
// export default authSlice.reducer;