import { Table, TextInput, Checkbox } from '@mantine/core';
import React, { useState, useEffect } from 'react';
import { CiTrash } from "react-icons/ci";
import "./HeaderComp.css";
import { useDispatch, useSelector } from 'react-redux';
import { setHeaders, updateHeader, addHeader, removeHeader } from '../../../redux/authSlice';
import { useFormSelectors } from '../../../redux/selector';


function HeaderTable({ showHeaders }) {
  const dispatch = useDispatch();
  const { authHeader , headers } = useFormSelectors();
  // const headers = useSelector(state => state.auth.headers);
  const [hoveredRowIndex, setHoveredRowIndex] = useState(null);

  console.log("headers", headers)

  const autoGeneratedHeaders = [
    { key: 'Content-Type', value: 'application/json', autoGenerated: true, checked: true },
    { key: 'Connection', value: 'keep-alive', autoGenerated: true, checked: true },
  ];

  if (authHeader) {
    autoGeneratedHeaders.push({ key: 'Authorization', value: '******************', autoGenerated: true, checked: true });
  }

  useEffect(() => {
    if (showHeaders) {
      const autoGeneratedRows = autoGeneratedHeaders.map(header => ({ ...header, checked: true }));
      const nonAutoGeneratedRows = headers.filter(row => !row.autoGenerated);
      dispatch(setHeaders([...autoGeneratedRows, ...nonAutoGeneratedRows]));
    } else {
      dispatch(setHeaders(headers.filter(row => !row.autoGenerated)));
    }
  }, [showHeaders, authHeader, dispatch]);

  const handleInputChange = (index, field, value) => {
    dispatch(updateHeader({ index, [field]: value }));

    // Check if the current row is the last user-added row and not empty
    if (index === headers.length - 1 && value !== '' && !headers[index].autoGenerated) {
      dispatch(addHeader({ key: '', value: '', checked: false }));
    }
  };

  const handleDeleteRow = (index) => {
    dispatch(removeHeader(index));
  };

  const handleCheckboxChange = (index) => {
    const checked = !headers[index].checked;
    dispatch(updateHeader({ index, checked }));
  };

 

  const tableRows = headers.map((row, index) => (
    <tr key={index}
      onMouseEnter={() => setHoveredRowIndex(index)}
      onMouseLeave={() => setHoveredRowIndex(null)}
      style={{ position: 'relative', paddingTop: '10px', paddingBottom: '10px' }}
    >
      <td>
        <Checkbox
          checked={row.checked}
          color="blue"
          onChange={() => handleCheckboxChange(index)}
          iconColor="white"
          size="md"
        />
      </td>
      <td>
        <TextInput
          style={{ width: "55%", padding: "3px" }}
          className="input-field"
          placeholder='Enter Header'
          value={row.key}
          onChange={(event) => handleInputChange(index, 'key', event.target.value)}
        />
      </td>
      <td>
        <TextInput
          style={{ width: "55%", padding: "3px" }}
          className="input-field"
          placeholder='Enter Value'
          value={row.value}
          onChange={(event) => handleInputChange(index, 'value', event.target.value)}
        />
      </td>
      <td style={{ position: 'relative' }}>
        {hoveredRowIndex === index && !row.autoGenerated && headers.length > 1 && (
          <CiTrash
            onClick={() => handleDeleteRow(index)}
            style={{
              position: 'absolute',
              right: '10px',
              top: '50%',
              transform: 'translateY(-50%)',
              cursor: 'pointer',
              color: 'red',
            }}
          />
        )}
      </td>
    </tr>
  ));

  return (
    <Table style={{ position: "relative", bottom: "35px" }}>
      <Table.Thead>
        <Table.Tr>
          <Table.Th></Table.Th>
          <Table.Th>KEY</Table.Th>
          <Table.Th>VALUE</Table.Th>
        </Table.Tr>
      </Table.Thead>
      <Table.Tbody>{tableRows}</Table.Tbody>
    </Table>
  );
}

export default HeaderTable;


// function HeaderTable({ showHeaders }) {
//   const {authHeader} = useFormSelectors()
//   const [userRows, setUserRows] = useState([{ key: '', value: '', checked: false }]);
//   const [hoveredRowIndex, setHoveredRowIndex] = useState(null);

//   useEffect(() => {
//     const autoGeneratedHeaders = [
//       { key: 'Content-Type', value: 'application/json' },
//       { key: 'Connection', value: 'keep-alive' },
//     ];

//     if (authHeader) {
//       autoGeneratedHeaders.push({ key: 'Authorization', value: '******************' });
//     }
//     if (showHeaders) {
//       setUserRows((prevRows) => {
//         const autoGeneratedRows = autoGeneratedHeaders.map(header => ({ ...header, checked: true, autoGenerated: true }));
//         return [...autoGeneratedRows, ...prevRows.filter(row => !row.autoGenerated)];
//       });
//     } else {
//       setUserRows(prevRows => prevRows.filter(row => !row.autoGenerated));
//     }
//   }, [showHeaders, authHeader]);

//   const handleInputChange = (index, field, value) => {
//     const newRows = [...userRows];
//     newRows[index][field] = value;
//     newRows[index].checked = newRows[index].key !== '' && newRows[index].value !== '';
//     setUserRows(newRows);

//     if (index === userRows.length - 1 && value !== '' && !newRows[index].autoGenerated) {
//       setUserRows([...newRows, { key: '', value: '', checked: false }]);
//     }
//   };

//   const handleDeleteRow = (index) => {
//     const newRows = userRows.filter((_, i) => i !== index);
//     setUserRows(newRows);
//   };

//   const handleCheckboxChange = (index) => {
//     const newRows = [...userRows];
//     newRows[index].checked = !newRows[index].checked;
//     setUserRows(newRows);
//   };

//   // Separate auto-generated and user rows for rendering
//   const autoGeneratedRows = userRows.filter(row => row.autoGenerated);
//   const editableUserRows = userRows.filter(row => !row.autoGenerated);

//   const tableRows = [
//     ...autoGeneratedRows,
//     ...editableUserRows
//   ].map((row, index) => (
//     <tr key={index}
//       onMouseEnter={() => setHoveredRowIndex(index)}
//       onMouseLeave={() => setHoveredRowIndex(null)}
//       style={{ position: 'relative', paddingTop: '10px', paddingBottom: '10px' }}
//     >
//       <td>
//         <Checkbox
//           checked={row.checked}
//           color="blue"
//           onChange={() => handleCheckboxChange(index)}
//           iconColor="white"
//           size="md"
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%", padding:"3px"}}
//           className="input-field"
//           placeholder='Enter Header'
//           value={row.key}
//           onChange={(event) => handleInputChange(index, 'key', event.target.value)}
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%" , padding:"3px"}}
//           className="input-field"
//           placeholder='Enter Value'
//           value={row.value}
//           onChange={(event) => handleInputChange(index, 'value', event.target.value)}
//         />
//       </td>
//       <td style={{ position: 'relative' }}>
//         {hoveredRowIndex === index && !row.autoGenerated && editableUserRows.length > 1 && (
//           <CiTrash
//             onClick={() => handleDeleteRow(index)}
//             style={{
//               position: 'absolute',
//               right: '10px',
//               top: '50%',
//               transform: 'translateY(-50%)',
//               cursor: 'pointer',
//               color: 'red',
//             }}
//           />
//         )}
//       </td>
//     </tr>
//   ));

//   return (
//     <Table style={{position:"relative", bottom:"35px"}}>
//       <Table.Thead>
//         <Table.Tr>
//           <Table.Th></Table.Th>
//           <Table.Th>KEY</Table.Th>
//           <Table.Th>VALUE</Table.Th>
//         </Table.Tr>
//       </Table.Thead>
//       <Table.Tbody>{tableRows}</Table.Tbody>
//     </Table>
//   );
// }

// export default HeaderTable;

// import { Table, TextInput, Checkbox } from '@mantine/core';
// import React, { useState, useEffect } from 'react';
// import { CiTrash } from "react-icons/ci";
// import "./HeaderComp.css";

// const autoGeneratedHeaders = [
//   { key: 'Content-Type', value: 'application/json' },
//   { key: 'Content-Length', value: '<calculated when request is sent>' },
//   { key: 'Host', value: '<calculated when request is sent>' },
//   { key: 'User-Agent', value: 'PostmanRuntime/7.40.0' },
//   { key: 'Accept', value: '*/*' },
//   { key: 'Accept-Encoding', value: 'gzip, deflate, br' },
//   { key: 'Connection', value: 'keep-alive' },
// ];

// function HeaderTable({ showHeaders }) {
//   const [userRows, setUserRows] = useState([{ key: '', value: '', checked: false }]);
//   const [hoveredRowIndex, setHoveredRowIndex] = useState(null);

//   useEffect(() => {
//     if (showHeaders) {
//       // Add autoGeneratedHeaders only if they are not already present
//       const autoGeneratedKeys = autoGeneratedHeaders.map(header => header.key);
//       const newRows = userRows.filter(row => !autoGeneratedKeys.includes(row.key));
//       setUserRows([...newRows, ...autoGeneratedHeaders.map(header => ({ ...header, checked: true, autoGenerated: true }))]);
//     } else {
//       // Remove autoGeneratedHeaders when showHeaders is false
//       setUserRows(userRows.filter(row => !row.autoGenerated));
//     }
//   }, [showHeaders]);

//   const handleInputChange = (index, field, value) => {
//     const newRows = [...userRows];
//     newRows[index][field] = value;
//     newRows[index].checked = newRows[index].key !== '' && newRows[index].value !== '';
//     setUserRows(newRows);

//     if (index === userRows.length - 1 && value !== '' && !newRows[index].autoGenerated) {
//       setUserRows([...newRows, { key: '', value: '', checked: false }]);
//     }
//   };

//   const handleDeleteRow = (index) => {
//     const newRows = userRows.filter((_, i) => i !== index);
//     setUserRows(newRows);
//   };

//   const handleCheckboxChange = (index) => {
//     const newRows = [...userRows];
//     newRows[index].checked = !newRows[index].checked;
//     setUserRows(newRows);
//   };

//   const tableRows = userRows.map((row, index) => (
//     <tr key={index}
//       onMouseEnter={() => setHoveredRowIndex(index)}
//       onMouseLeave={() => setHoveredRowIndex(null)}
//       style={{ position: 'relative', paddingTop: '10px', paddingBottom: '10px' }}
//     >
//       <td>
//         <Checkbox
//           checked={row.checked}
//           color="blue"
//           onChange={() => handleCheckboxChange(index)}
//           iconColor="white"
//           size="md"
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%" }}
//           className="input-field"
//           placeholder='Enter Header'
//           value={row.key}
//           onChange={(event) => handleInputChange(index, 'key', event.target.value)}
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%" }}
//           className="input-field"
//           placeholder='Enter Value'
//           value={row.value}
//           onChange={(event) => handleInputChange(index, 'value', event.target.value)}
//         />
//       </td>
//       <td style={{ position: 'relative' }}>
//         {hoveredRowIndex === index && !row.autoGenerated && userRows.length > 1 && (
//           <CiTrash
//             onClick={() => handleDeleteRow(index)}
//             style={{
//               position: 'absolute',
//               right: '10px',
//               top: '50%',
//               transform: 'translateY(-50%)',
//               cursor: 'pointer',
//               color: 'red',
//             }}
//           />
//         )}
//       </td>
//     </tr>
//   ));

//   return (
//     <Table>
//       <Table.Thead>
//         <Table.Tr>
//           <Table.Th></Table.Th>
//           <Table.Th>KEY</Table.Th>
//           <Table.Th>VALUE</Table.Th>
//         </Table.Tr>
//       </Table.Thead>
//       <Table.Tbody>{tableRows}</Table.Tbody>
//     </Table>
//   );
// }

// export default HeaderTable;
// import { Table, TextInput , Button } from '@mantine/core';
// import React, { useState, useEffect } from 'react';
// import { Checkbox } from '@mantine/core';
// import { CiTrash } from "react-icons/ci";
// import "./HeaderComp.css";

// const autoGeneratedHeaders = [
//   { key: 'Content-Type', value: 'application/json' },
//   { key: 'Content-Length', value: '<calculated when request is sent>' },
//   { key: 'Host', value: '<calculated when request is sent>' },
//   { key: 'User-Agent', value: 'PostmanRuntime/7.40.0' },
//   { key: 'Accept', value: '*/*' },
//   { key: 'Accept-Encoding', value: 'gzip, deflate, br' },
//   { key: 'Connection', value: 'keep-alive' },
// ];



// function HeaderTable({ showHeaders }) {
  
//   const [rows, setRows] = useState([{ key: '', value: '', checked: false }]);
//   const [hoveredRowIndex, setHoveredRowIndex] = useState(null);



//   useEffect(() => {
//     if (showHeaders) {
//       setRows([...rows, ...autoGeneratedHeaders.map(header => ({ ...header, checked: true }))]);
//     } else {
//       setRows(rows.filter(row => !autoGeneratedHeaders.some(header => header.key === row.key)));
//     }
//   }, [showHeaders]);



//   const handleInputChange = (index, field, value) => {
//     const newRows = [...rows];
//     newRows[index][field] = value;
//     newRows[index].checked = newRows[index].key !== '' && newRows[index].value !== '';
//     setRows(newRows);

//     if (index === rows.length - 1 && value !== '' && rows.length < 5) {
//       setRows([...rows, { key: '', value: '', checked: false }]);
//     }
//   }

//   const handleDeleteRow = (index) => {
//     const newRows = rows.filter((_, i) => i !== index);
//     setRows(newRows);
//   };

//    // Change 1: Added handleCheckboxChange function
//    const handleCheckboxChange = (index) => {
//     const newRows = [...rows];
//     newRows[index].checked = !newRows[index].checked;
//     setRows(newRows);
//   };

  
//   const tableRows = rows.map((row, index) => (
//     <tr key={index}
//     onMouseEnter={() => setHoveredRowIndex(index)}
//     onMouseLeave={() => setHoveredRowIndex(null)}
//     style={{ position: 'relative', paddingTop: '10px', paddingBottom: '10px' }}
//     >
//       <td>
//       <Checkbox
//           checked={row.checked}
//           color="blue"
//           onChange={() => handleCheckboxChange(index)} 
//           iconColor="white"
//           size="md"
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%" }}
//           className="input-field" 
//           placeholder='Enter Header'
//           value={row.key}
//           onChange={(event) => handleInputChange(index, 'key', event.target.value)}
//         />
//       </td>
//       <td>
//         <TextInput
//           style={{ width: "55%" }}
//           className="input-field" 
//           placeholder='Enter Value'
//           value={row.value}
//           onChange={(event) => handleInputChange(index, 'value', event.target.value)}
//         />
//       </td>
//       <td style={{ position: 'relative' }}>
//         {hoveredRowIndex === index && rows.length > 1 && (
//           <CiTrash
//             onClick={() => handleDeleteRow(index)}
//             style={{
//               position: 'absolute',
//               right: '10px',
//               top: '50%',
//               transform: 'translateY(-50%)',
//               cursor: 'pointer',
//               color: 'red',
//             }}
//           />
//         )}
//       </td>

//     </tr>
//   ));



//   return (
//     <Table>
//       <Table.Thead>
//         <Table.Tr>
//           <Table.Th></Table.Th>
//           <Table.Th>KEY</Table.Th>
//           <Table.Th>VALUE</Table.Th>
//         </Table.Tr>
//       </Table.Thead>
//       <Table.Tbody>{tableRows}</Table.Tbody>
//     </Table>
//   );
// }

// export default HeaderTable